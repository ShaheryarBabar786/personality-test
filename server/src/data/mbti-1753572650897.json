{
  "id": "mbti-1753572650897",
  "name": "16 Personality Types (MBTI)",
  "type": "mbti",
  "scoringType": "compare",
  "description": "new test",
  "questions": [
    {
      "id": "q1753572632026",
      "text": "this is the good question",
      "target": "S",
      "isReversed": true,
      "weight": 1,
      "translations": {
        "french": "french",
        "spanish": "spanish"
      }
    },
    {
      "id": "q1753572682740",
      "text": "this is the excellent question",
      "target": "S",
      "isReversed": false,
      "weight": 1,
      "translations": {
        "french": "2nd quesrtion french",
        "spanish": "spanish"
      }
    }
  ],
  "outcomes": [
    {
      "id": "E",
      "name": "Extraversion",
      "description": "Outgoing, energetic",
      "translations": {
        "English": "Extraversion",
        "French": "",
        "Spanish": ""
      }
    },
    {
      "id": "I",
      "name": "Introversion",
      "description": "Reserved, thoughtful",
      "translations": {
        "English": "Introversion",
        "French": "",
        "Spanish": ""
      }
    },
    {
      "id": "S",
      "name": "Sensing",
      "description": "Practical, detail-oriented",
      "translations": {
        "English": "Sensing",
        "French": "",
        "Spanish": ""
      }
    },
    {
      "id": "N",
      "name": "Intuition",
      "description": "Imaginative, big-picture",
      "translations": {
        "English": "Intuition",
        "French": "",
        "Spanish": ""
      }
    },
    {
      "id": "T",
      "name": "Thinking",
      "description": "Logical, objective",
      "translations": {
        "English": "Thinking",
        "French": "",
        "Spanish": ""
      }
    },
    {
      "id": "F",
      "name": "Feeling",
      "description": "Empathetic, compassionate",
      "translations": {
        "English": "Feeling",
        "French": "",
        "Spanish": ""
      }
    },
    {
      "id": "J",
      "name": "Judging",
      "description": "Structured, decisive",
      "translations": {
        "English": "Judging",
        "French": "",
        "Spanish": ""
      }
    },
    {
      "id": "P",
      "name": "Perceiving",
      "description": "Flexible, spontaneous",
      "translations": {
        "English": "Perceiving",
        "French": "",
        "Spanish": ""
      }
    }
  ],
  "customScoring": "function(outcomes, testConfig, answers) {\n  // MBTI Scoring Logic\n  const dichotomies = [\n    ['E', 'I'],\n    ['S', 'N'],\n    ['T', 'F'],\n    ['J', 'P']\n  ];\n\n  const outcomeScores = outcomes.map(o => ({...o, score: 0}));\n\n  // Calculate scores for each question\n  testConfig.questions.forEach((question, index) => {\n    const answer = answers[index];\n    if (answer === null || answer === undefined) return;\n\n    const dichotomy = dichotomies.find(d => d.includes(question.target));\n    if (!dichotomy) return;\n\n    const [first, second] = dichotomy;\n    const isFirst = question.target === first;\n    let points = answer;\n\n    if (question.isReversed) {\n      points = 6 - answer;\n    }\n\n    if (points > 3) {\n      const outcome = outcomeScores.find(o => o.id === (isFirst ? first : second));\n      if (outcome) outcome.score += points - 3;\n    } else if (points < 3) {\n      const outcome = outcomeScores.find(o => o.id === (isFirst ? second : first));\n      if (outcome) outcome.score += 3 - points;\n    }\n  });\n\n  // Calculate final percentages\n  const detailedResults = dichotomies.map(([a, b]) => {\n    const aScore = outcomeScores.find(o => o.id === a)?.score || 0;\n    const bScore = outcomeScores.find(o => o.id === b)?.score || 0;\n    const total = aScore + bScore || 1;\n\n    return {\n      dichotomy: `${a}/${b}`,\n      [a]: Math.round((aScore / total) * 100),\n      [b]: Math.round((bScore / total) * 100),\n      winner: aScore > bScore ? a : b,\n    };\n  });\n\n  const type = detailedResults.map(d => d.winner).join('');\n  const percentageString = detailedResults\n    .map(d => {\n      const letters = d.dichotomy.split('/');\n      return `${letters[0]}/${letters[1]}: ${d[letters[0]]}%/${d[letters[1]]}%`;\n    })\n    .join('; ');\n\n  return {\n    outcomes: outcomeScores,\n    result: type,\n    detailedResult: detailedResults,\n    resultWithPercentages: percentageString\n  };\n}",
  "results": [
    {
      "timestamp": "2025-07-26T23:32:50.058Z",
      "testId": "mbti-1753572650897",
      "testName": "16 Personality Types (MBTI)",
      "finalResult": "ISFP",
      "resultWithPercentages": "E/I: 0%/0%; S/N: 100%/0%; T/F: 0%/0%; J/P: 0%/0%"
    }
  ]
}